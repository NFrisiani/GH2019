Pseudocode & Working out


0. Scoring function:
 
## slides is a list of slides (list of lists of pictures)
def score(N, sildes):
    sc = 0
    for i in range(1, N):
        old_tags = sildes[i-1][0].tags
        new_tags = slides[i][0].tags
        if(len(slides[i-1]) > 1):
            old_tags += sildes[i-1][1].tags
            old_tags -= set(sildes[i-1][0].tags).intersection(set(sildes[i-1][1].tags))
        if(len(slides[i]) > 1):
            old_tags += sildes[i][1].tags
            old_tags -= set(sildes[i][0].tags).intersection(set(sildes[i][1].tags))
            
        common = len(set(old_tags) & set(new_tags))
        new = len(old_tags) - common
        old = len(new_tags) - common
        sc += min(common, new, old)
    
    return sc




________________


0. Worst approach


for i in data:
        return pairs from first file read to last file read (or random)


1. Heuristic 1 approach: never combine files with small number of tags with files with large numbers of tags as they will ruin the large files (which have good potential).


nicosort()


for i in data: 
        data.sort() #by biggest at the top
        return random pairs starting from top


2. Heuristic 2 approach: images that have one tag in common probably have others in common too


data.sort() 
unmatched.append(data)        
for i in unmatched:
for j in (i:unmatched):
        if j has a common tag with i, return pair
        remove i and j from unmatched
        break (get a new i & repeat)


3. Heuristic 3 approach: you should try to match V V with V V to maximise score, then match the H
________________


A - Optimal Solution:


3 


0
1 2
3